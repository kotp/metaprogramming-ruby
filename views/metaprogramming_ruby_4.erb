<div>
<h1>Metaprogramming in Ruby</h1>

<h2>1.6 Exercises</h2>
<h3>1.6.1 Exercise 1</h3>
<p>The Core Ruby course at RubyLearning.org runs for 8 weeks. Every week there is a quiz and marks are allocated out of 10. At the end of 8 weeks the student can find out his percentage score. For example, a students scores 5,10,10,10,10,10,10,10 marks in 8 weeks i.e. his percentage score is 93.75%</p>
<p>Every Core Ruby batch has hundreds of students. Let us assume that we have a Ruby method that does this percentage calculation and returns the same value given the same set of arguments. We don't need to go on calculating the value each time. We only need to calculate the value the first time and then somehow associate that value with that set of arguments. Then the next time it gets called, if we have the same arguments we can use the previously stored value as the reurn value of this method this bypassing the need to do the calcualtions again.</p>
<p>To start with, let us look at an existing class and method and then keep modifying them to achieve the above result.</p>
<pre>
class Result
  def total(*scores)
    percentage_calculation(*scores)
  end
  
  private
  
  def percentage_calculation(*scores)
    puts "Calculation for #{scores.inspect}"
    scores.inject {|sum, n| sum + n } * (100.0/80.0)
  end
end

r = Result.new
puts r.total(5,10,10,10,10,10,10,10)
puts r.total(5,10,10,10,10,10,10,10)
puts r.total(10,10,10,10,10,10,10,10)
puts r.total(10,10,10,10,10,10,10,10)
</pre>
<p>In the code above, we have a <b>Result</b> class and a <b>total</b> method that takes a list of <b>scores</b>. The <b>scores</b> represent the marks obtained by a student in each of the 8 quizzes in the course. The private method <b>percentage_calculation</b> does the actual percentage calculation. Finally, we call <b>total</b> method 4 times. The first two and the last two have the same set of scores. When we run our code we get the following output:</p>
<pre>
Calculation for [5, 10, 10, 10, 10, 10, 10, 10]
93.75
Calculation for [5, 10, 10, 10, 10, 10, 10, 10]
93.75
Calculation for [10, 10, 10, 10, 10, 10, 10, 10]
100.0
Calculation for [10, 10, 10, 10, 10, 10, 10, 10]
100.0
</pre>
<p>We called the <b>total</b> method 4 times and that in turn also called the <b>percentage_calculation</b> method 4 times. <span style="color:brown;">We are now going to try and reduce the number of calls to the <b>percentage_calculation</b> method</span>.</p>
<p>The first way to reduce the number of calls to the <b>percentage_calculation</b> method is to somehow store the previous results in memory. For this, we shall define a hash named <b>mem</b> and then use the <b>mem</b> hash in the <b>total</b> method, as shown in the modified code of the class <b>Result</b> below.</p>
<pre>
class Result
  def initialize
    @mem = {}
  end
  def total(*scores)
    if @mem.has_key?(scores)
      @mem[scores]
    else
      @mem[scores] = percentage_calculation(*scores)
    end
  end
  
  private
  
  def percentage_calculation(*scores)
    puts "Calculation for #{scores.inspect}"
    scores.inject {|sum, n| sum + n } * (100.0/80.0)
  end
end

r = Result.new
puts r.total(5,10,10,10,10,10,10,10)
puts r.total(5,10,10,10,10,10,10,10)
puts r.total(10,10,10,10,10,10,10,10)
puts r.total(10,10,10,10,10,10,10,10)
</pre>

<h3>1.6.2 Exercise 2</h3>
<p>Suppose we have two CSV (comma-separated values) files with a descriptive header at the top, as follows:</p>

<p>File: <b>location.txt</b></p>
<pre>
name,country
"Matz", "USA"
"Fabio Akita", "Brazil"
"Peter Cooper", "UK"
</pre>
<p>File: <b>twitter.txt</b></p>
<pre>
twitterid,url
"AkitaOnRails","http://www.akitaonrails.com/"
"peterc","http://www.petercooper.co.uk/"
</pre>

<p>Let us start by writing a class and storing it in a file <b>datawrapper.rb</b>. We'll call our class <b>DataWrapper</b> and also define a <em>class method</em> called <b>wrap</b> which will take a filename as a parameter and build a class from it. The first line of the above two text files have a comma-separated list of attribute names. Furthermore, we want to treat the file as an array of data items, reading it into an array of objects.</p>
<pre>
# file: datawrapper.rb
class DataWrapper
   def self.wrap(file_name)
     data = File.new(file_name)
     header = data.gets.chomp
     data.close
     puts header # => name,country
     # in the end we return the class name
  end
end
</pre>

<p>Now let's start writing a small program <b>testdatawrapper.rb</b> that uses the above. Let's read our <b>location.txt</b> file.</p>
<pre>
#testdatawrapper.rb
require 'datawrapper'
DataWrapper.wrap("location.txt")
</pre>

<p>Coming back to our <b>datawrapper.rb</b> program, let's create a new class and give it a suitable name:</p>
<pre>
# file: datawrapper.rb
class DataWrapper
  def self.wrap(file_name)
    data = File.new(file_name)
    header = data.gets.chomp
    data.close
    class_name = File.basename(file_name, ".txt").capitalize  
    klass = Object.const_set(class_name, Class.new)
    klass # we return the class name
  end
end
</pre>

<p>The variable <b>klass</b> refers to our new class. If the file was called <b>location.txt</b>, the class will be named <b>Location</b>.</p>
<p>Let us run our modified program <b>testdatawrapper.rb</b>.</p>
<pre>
#testdatawrapper.rb
require 'datawrapper'
data = DataWrapper.wrap("location.txt") # Capture return value and
puts data # => Location
</pre>

<p>Now, let's start to add attributes to it. The first line of data is a list of names. Let's turn it into a simple array of strings by splitting on the comma character. The modified <b>datawrapper.rb</b> program is:</p>
<pre>
# file: datawrapper.rb
class DataWrapper
  def self.wrap(file_name)
    data = File.new(file_name)
    header = data.gets.chomp
    data.close
    class_name = File.basename(file_name, ".txt").capitalize  
    klass = Object.const_set(class_name, Class.new)
    # get attribute names
    names = header.split(",")
    p names # => ["name", "country"]
    klass # we return the class name
  end
end
</pre>

<p>Now we can use <b>class_eval</b> in the context of our new class <b>klass</b>. At the same time, we'll define an <b>initialize</b> method. Also, we shall write a <b>to_s</b> method so that we can use <b>puts</b>; and let's also <b>alias</b> that to <b>inspect</b> for convenience. The modified <b>datawrapper.rb</b> program is:</p>
<pre>
# file: datawrapper.rb
class DataWrapper
  def self.wrap(file_name)
    data = File.new(file_name)
    header = data.gets.chomp
    data.close
    class_name = File.basename(file_name, ".txt").capitalize  
    klass = Object.const_set(class_name, Class.new)
    # get attribute names
    names = header.split(",")
    klass.class_eval do
      attr_accessor *names
      define_method(:initialize) do |*values|
        names.each_with_index do |name, i|
          instance_variable_set("@"+name, values[i])
        end
      end
      define_method(:to_s) do
        str = "&lt;#{self.class}:"
        names.each {|name| str &lt;&lt; " #{name}=#{self.send(name)}" }
        str + "&gt;"
      end
      alias_method :inspect, :to_s
    end
    klass # we return the class name
  end
end
</pre>


<p>Next, we write a class-level method that does a <b>read</b> of an entire file and returns an array of objects representing its contents. Because it's a class method, we're just adding a singleton onto an object <b>klass</b> which happens to be a class. The modified <b>datawrapper.rb</b> program is:</p>
<pre>
# file: datawrapper.rb
class DataWrapper
  def self.wrap(file_name)
    data = File.new(file_name)
    header = data.gets.chomp
    data.close
    class_name = File.basename(file_name, ".txt").capitalize  
    klass = Object.const_set(class_name, Class.new)
    # get attribute names
    names = header.split(",")
    klass.class_eval do
      attr_accessor *names
      define_method(:initialize) do |*values|
        names.each_with_index do |name, i|
          instance_variable_set("@"+name, values[i])
        end
      end
      define_method(:to_s) do
        str = "&lt;#{self.class}:"
        names.each {|name| str &lt;&lt; " #{name}=#{self.send(name)}" }
        str + "&gt;"
      end
      alias_method :inspect, :to_s
    end
    def klass.read
      array = []
      data = File.new(self.to_s.downcase+".txt")
      data.gets  # throw away header
      data.each do |line|
        line.chomp!
        values = eval("[#{line}]")
        array &lt;&lt; self.new(*values)
      end
      data.close
      array
    end
    klass # we return the class name
  end
end
</pre>

<p>Let us now modify our program <b>testdatawrapper.rb</b> and test out the program <b>datawrapper.rb</b>.</p>
<pre>
#testdatawrapper.rb
require 'datawrapper'
klass = DataWrapper.wrap("location.txt")
list = klass.read
list.each do |location|
  puts("#{location.name} is from the #{location.country}")
end
</pre>

<p>Now let's look at a totally different data file i.e. <b>twitter.txt</b>. Our <b>testdatawrapper.rb</b> is as follows:</p>
<pre>
#testdatawrapper.rb
require 'datawrapper'
klass = DataWrapper.wrap("twitter.txt")
list = klass.read
list.each do |twitter|
  puts("#{twitter.twitterid}'s site is #{twitter.url}")
end
</pre>

<p>Even if we add another field to the data file, none of our code in the program <b>datawrapper.rb</b> would have to change. This is a an exercise and an example of the kind of metaprogramming that Ruby allows.</p>

<h2>1.7 Scope</h2>

<h2>References</h2>
<ul>
<li><a href="http://www.devsource.com/c/a/Languages/An-Exercise-in-Metaprogramming-with-Ruby/">An Exercise in Metaprogramming with Ruby</a>.</li>
<li><a href="http://pragprog.com/titles/ppmetr/metaprogramming-ruby">Metaprogramming Ruby</a> - Publisher: The Pragmatic Programmers, Author: Paolo Perrotta.</li>
<li><a href="http://yehudakatz.com/2009/11/15/metaprogramming-in-ruby-its-all-about-the-self/">Metaprogramming in Ruby: Itâ€™s All About the Self</a>.</li>
<li><a href="http://pragprog.com/titles/ruby3/programming-ruby-1-9">Programming Ruby 1.9</a> - Publisher: The Pragmatic Programmers, Author: Dave Thomas.</li>
<li><a href="http://ruby-metaprogramming.heroku.com/html/seeingMetaclassesClearly.html">Seeing Metaclasses Clearly</a>.</li>
<li><a href="http://www.sapphiresteel.com/The-Book-Of-Ruby">The Book Of Ruby</a> - Author: Huw Collingbourne.</li>
<li><a href="http://pragprog.com/screencasts/v-dtrubyom/the-ruby-object-model-and-metaprogramming">The Ruby Object Model and Metaprogramming screencasts with Dave Thomas</a>.</li>
<li><a href="http://www.contextualdevelopment.com/articles/2008/ruby-singleton">Understanding Ruby Singleton Classes</a>.</li>
</ul>

<p class="pre-footer align-right">
  <b>
    <a href="http://metaprogramming-ruby.heroku.com/">&lt;Home | </a>
    <a href="http://metaprogramming-ruby.heroku.com/metaprogramming_ruby_3">Prev&gt;</a>
  </b>
</p>

<p class="copyright"><b>Note</b>: The Ruby Logo is Copyright (c) 2006, Yukihiro Matsumoto. The material in these study notes is drawn primarily from the above references. Our acknowledgment and thanks to all of them.</p>
</div>
<!-- Hit Tail (Invisible code) -->
<script src="http://13043.hittail.com/mlt.js" type="text/javascript"></script>
<!-- Hit Tail (Invisible code) -->

<!-- Google Analytics code -->
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
var pageTracker = _gat._getTracker("UA-59044-10");
pageTracker._trackPageview();
</script>
<!-- Google Analytics code ends -->
